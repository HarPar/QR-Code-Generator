/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qrcodegeneration;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.plugins.jpeg.JPEGImageWriteParam;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JFrame;


/**
 *
 * @author Parikh
 */
public class DrawQRCode{
    String d;
    String[] t;
    String D;
    int[][] me;
    String[][] mapR =
        {{"R","R","R","R","R","R","R","R","R","","","","","R","R","R","R","R","R","R","R"},
         {"R","R","R","R","R","R","R","R","R","","","","","R","R","R","R","R","R","R","R"},
         {"R","R","R","R","R","R","R","R","R","","","","","R","R","R","R","R","R","R","R"},
         {"R","R","R","R","R","R","R","R","R","","","","","R","R","R","R","R","R","R","R"},
         {"R","R","R","R","R","R","R","R","R","","","","","R","R","R","R","R","R","R","R"},
         {"R","R","R","R","R","R","R","R","R","","","","","R","R","R","R","R","R","R","R"},
         {"R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R"},
         {"R","R","R","R","R","R","R","R","R","","","","","R","R","R","R","R","R","R","R"},
         {"R","R","R","R","R","R","R","R","R","","","","","R","R","R","R","R","R","R","R"},
         {"","","","","","","R","","","","","","","","","","","","","",""},
         {"","","","","","","R","","","","","","","","","","","","","",""},
         {"","","","","","","R","","","","","","","","","","","","","",""},
         {"","","","","","","R","","R","","","","","","","","","","","",""},
         {"R","R","R","R","R","R","R","R","R","","","","","","","","","","","",""},
         {"R","R","R","R","R","R","R","R","R","","","","","","","","","","","",""},
         {"R","R","R","R","R","R","R","R","R","","","","","","","","","","","",""},
         {"R","R","R","R","R","R","R","R","R","","","","","","","","","","","",""},
         {"R","R","R","R","R","R","R","R","R","","","","","","","","","","","",""},
         {"R","R","R","R","R","R","R","R","R","","","","","","","","","","","",""},
         {"R","R","R","R","R","R","R","R","R","","","","","","","","","","","",""},
         {"R","R","R","R","R","R","R","R","R","","","","","","","","","","","",""}};
    
     int[][] map = 
        {{1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1},
         {1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
         {1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1},
         {1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1},
         {1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1},
         {1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
         {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1},
         {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0},
         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

    /*int[][] map = 
        {{1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1},
         {1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
         {1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1},
         {1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1},
         {1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1},
         {1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
         {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1},
         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1},
         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
         {1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0}};*/
    int counter = 0;
    
    JFrame frame;
    
    
    //Constructor
    public DrawQRCode(String d, String[] t){
        this.d = d;
        this.t = t;
        D = this.d;
        for(int i = 0; i < t.length; i++){
            D+= t[i];
        }

        D = D.replaceAll("\\s","");
        System.out.println("CODE: " + D);
        
        
        frame = new JFrame() {
            public void paint(Graphics g) {
                int PIX_SIZE = 20;
                int x = me.length;
                int y = me[0].length;
                g.setColor(Color.GRAY);
                g.fillRect(0, 0, 900, 900);
                /*
                for(int a = 20; a > 0; a-=2){
                    for(int i = 20; i >= 0; i--){
                        for(int k = 0; k < 2; k++){
                            if(a<=6){
                                x = a-k;
                                //System.out.println(a-1-k + " " + i);
                            }else{
                                x = a-k;
                                //System.out.println(a-k + " " + i);
                            }

                            if((a/2)%2==0){
                                y = i;
                            }else{
                                y = 20-i;
                            }
                            if(me[y][x] == 1){
                                g.setColor(Color.BLACK);
                            }else{
                                g.setColor(Color.WHITE);

                            }
                            g.fillRect(PIX_SIZE*x + 10, PIX_SIZE*y + 100, PIX_SIZE, PIX_SIZE);
                            sleep(1);
                            if(mapR[y][x]!="R"){
                                if(g.getColor() == Color.WHITE){
                                    System.out.print("0");
                                }else{
                                    System.out.print("1");
                                }
                            }
                        }
                    }
                }*/
                for(int i = 20; i >= 0; i--){
                    for(int j = 20; j >= 0; j--){
                        if(me[j][i] == 1){
                            g.setColor(Color.BLACK);
                        }else{
                            g.setColor(Color.WHITE);

                        }
                        g.fillRect(PIX_SIZE*i + 10, PIX_SIZE*j + 100, PIX_SIZE, PIX_SIZE);
                        /*sleep(10);
                        if(mapR[j][i]!="R"){
                            if(g.getColor() == Color.WHITE){
                                System.out.print("0");
                            }else{
                                System.out.print("1");
                            }
                        }*/
                    }
                }
            }
        };
        frame.setSize(800, 800);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
    
    
    //Gets the map required to draw the QR Code
    public int[][] getMap(){
        int QRVersion = 1;

        
        /*   int[][] map = 
        {{1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1},
         {1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,1},
         {1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1},
         {1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,1,1,1,0,1},
         {1,0,1,1,1,0,1,0,0,1,1,1,1,0,1,0,1,1,1,0,1},
         {1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1},
         {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1},
         {0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
         {1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,1,0,1,1,1,1},
         {0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,1,0,1,1},
         {0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,1},
         {0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,0},
         {0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,0},
         {0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1},
         {1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,1,0,0,1},
         {1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0},
         {1,0,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0},
         {1,0,1,1,1,0,1,0,0,0,0,1,0,1,1,1,0,1,1,0,0},
         {1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
         {1,0,0,0,0,0,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1},
         {1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0}};*/
        
        /*    int[][] map = 
        {{1,1,1,1,1,1,1,0,2,0,0,1,0,0,1,1,1,1,1,1,1},
         {1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,1},
         {1,0,1,1,1,0,1,0,2,1,0,1,1,0,1,0,1,1,1,0,1},
         {1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1},
         {1,0,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,1,1,0,1},
         {1,0,0,0,0,0,1,0,2,1,0,0,1,0,1,0,0,0,0,0,1},
         {1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1},
         {0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0},
         {1,0,2,1,1,1,1,2,1,1,0,0,1,1,1,2,1,1,2,1,2},
         {1,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,1,1,1,0},
         {0,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0},
         {1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0},
         {1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1},
         {0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0},
         {1,1,1,1,1,1,1,0,2,1,1,1,1,1,1,0,0,1,1,1,1},
         {1,0,0,0,0,0,1,0,1,0,1,1,1,1,0,0,1,0,1,1,1},
         {1,0,1,1,1,0,1,0,1,1,0,1,1,0,1,0,0,0,1,1,1},
         {1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0},
         {1,0,1,1,1,0,1,0,2,1,0,0,0,0,1,0,0,0,0,1,1},
         {1,0,0,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1},
         {1,1,1,1,1,1,1,0,2,1,0,1,0,0,0,0,0,0,0,1,1}};*/
        

        

        
        int xDM = 4*QRVersion + 9;
        int yDM = 8;
        map[xDM][yDM] = 1;
        int unreserved = mapR.length * mapR[0].length;
        for(int i = 0; i < mapR.length; i++){
            for(int j = 0; j < mapR[i].length; j++){
                if(mapR[i][j].equals("R")){
                    unreserved--;
                }
            }
        }
        int x, y;
        for(int a = 20; a > 0; a-=2){
            for(int i = 20; i >= 0; i--){
                for(int k = 0; k < 2; k++){
                    if(a<=6){
                        x = a-1-k;
                        //System.out.println(a-1-k + " " + i);
                    }else{
                        x = a-k;
                        //System.out.println(a-k + " " + i);
                    }
                    
                    if((a/2)%2==0){
                        y = i;
                    }else{
                        y = 20-i;
                    }
                    //System.out.println(x + " " + y);
                    addBits(x, y);
                }
            }
        }

        for(int i =0; i < map.length; i++){
            for(int j = 0; j < map.length; j++){
                System.out.print(map[i][j]);
            }
            System.out.println("");

        }
        return map;
    }
    
    
    //Sleep to create an animated QR Code
    public void sleep(int t){
        try{
            Thread.sleep(t);
        }catch(Exception e){
            
        }
    }

    //Draws the map into a jpg file
    public void drawMap(int[][] m) throws IOException{
        int PIX_SIZE = 20;
        int x = m.length;
        int y = m[0].length;
        me = m;
        
        BufferedImage bi = new BufferedImage( PIX_SIZE * x, PIX_SIZE * y, BufferedImage.TYPE_3BYTE_BGR );
        Graphics2D g=(Graphics2D)bi.getGraphics();

        String fn =  "qr.jpg";
        
        for(int i = 0; i < x; i++){
            for(int j = 0; j < y; j++){
                if(m[i][j] == 1){
                    g.setColor(Color.BLACK);
                }else{
                    g.setColor(Color.WHITE);

                }
                g.fillRect(PIX_SIZE*j, PIX_SIZE*i, PIX_SIZE, PIX_SIZE);

            }
        }
        
        //frame.repaint();
        
        g.dispose();
        
        java.util.Iterator iter = ImageIO.getImageWritersByFormatName("jpg");

        ImageWriter writer = (ImageWriter)iter.next();

        ImageOutputStream ios = ImageIO.createImageOutputStream( new File(fn) );

        writer.setOutput(ios);

        ImageWriteParam param = new JPEGImageWriteParam( java.util.Locale.getDefault() );

        writer.write(null, new IIOImage( bi, null, null ), param);

        
    }

    
    //Adds bit to the map
    private void addBits(int y, int x) {
        if(mapR[x][y].equals("")){
            map[x][y] = Integer.parseInt(D.substring(counter, counter+1));
            counter++;
        }
    }
}
